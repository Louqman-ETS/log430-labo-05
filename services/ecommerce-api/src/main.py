from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import logging
import time
import uuid
import os
from contextlib import asynccontextmanager

from src.database import engine, Base
from src.api.v1.router import api_router
from src.init_db import init_database

# Configuration du logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestion du cycle de vie de l'application"""
    # Startup
    logger.info("üöÄ D√©marrage du service Ecommerce API")

    # Cr√©er les tables si pas en mode test
    if not os.getenv("TESTING"):
        Base.metadata.create_all(bind=engine)
        logger.info("üìä Tables de base de donn√©es cr√©√©es")

        # Initialiser les donn√©es de test
        init_database()
        logger.info("‚úÖ Donn√©es de test initialis√©es")

    yield

    # Shutdown
    logger.info("üõë Arr√™t du service Ecommerce API")


# Cr√©er l'application FastAPI
app = FastAPI(
    title="üõçÔ∏è Ecommerce API",
    description="Service unifi√© de gestion des clients, paniers et commandes",
    version="1.0.0",
    lifespan=lifespan,
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware pour le logging et timing des requ√™tes
@app.middleware("http")
async def logging_middleware(request: Request, call_next):
    """Middleware pour le logging structur√© avec Request-ID"""
    start_time = time.time()

    # G√©n√©rer ou r√©cup√©rer le Request-ID
    request_id = request.headers.get("X-Request-ID", str(uuid.uuid4()))

    # Log de la requ√™te entrante
    logger.info(f"üîç [{request_id}] {request.method} {request.url.path} - D√©but")

    # Traiter la requ√™te
    try:
        response = await call_next(request)

        # Calculer le temps de traitement
        process_time = time.time() - start_time

        # Ajouter les headers de r√©ponse
        response.headers["X-Request-ID"] = request_id
        response.headers["X-Process-Time"] = str(process_time)

        # Log de la r√©ponse
        logger.info(
            f"‚úÖ [{request_id}] {request.method} {request.url.path} - "
            f"Status: {response.status_code} - Temps: {process_time:.3f}s"
        )

        return response

    except Exception as e:
        process_time = time.time() - start_time
        logger.error(
            f"‚ùå [{request_id}] {request.method} {request.url.path} - "
            f"Erreur: {str(e)} - Temps: {process_time:.3f}s"
        )
        raise


# Gestionnaire d'erreurs global
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Gestionnaire d'erreurs HTTP personnalis√©"""
    request_id = request.headers.get("X-Request-ID", str(uuid.uuid4()))

    # Si le detail est d√©j√† un dict, l'utiliser tel quel
    if isinstance(exc.detail, dict):
        error_detail = exc.detail
    else:
        # Sinon, cr√©er un format standardis√©
        error_detail = {
            "error": "HTTP Exception",
            "message": exc.detail,
            "service": "ecommerce-api",
        }

    return JSONResponse(
        status_code=exc.status_code,
        content=error_detail,
        headers={"X-Request-ID": request_id},
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Gestionnaire d'erreurs g√©n√©rales"""
    request_id = request.headers.get("X-Request-ID", str(uuid.uuid4()))

    logger.error(f"‚ùå Erreur non g√©r√©e [{request_id}]: {str(exc)}")

    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "Une erreur interne s'est produite",
            "service": "ecommerce-api",
        },
        headers={"X-Request-ID": request_id},
    )


# Routes de base
@app.get("/")
async def root():
    """üè† Point d'entr√©e de l'API"""
    return {
        "service": "ecommerce-api",
        "version": "1.0.0",
        "description": "Service unifi√© de gestion des clients, paniers et commandes",
        "status": "running",
        "domains": ["customers", "carts", "orders"],
        "docs": "/docs",
    }


@app.get("/health")
async def health_check():
    """üè• V√©rification de l'√©tat du service"""
    return {"status": "healthy", "service": "ecommerce-api", "timestamp": time.time()}


# Inclure les routes de l'API
app.include_router(api_router, prefix="/api/v1")

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
