version: '3.8'

services:
  # Inventory Service (Port 8001) - Fusion de Products et Stock
  inventory-db:
    image: postgres:15
    container_name: inventory-db
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  inventory-api:
    build: ./inventory-api
    container_name: inventory-api
    environment:
      DATABASE_URL: postgresql://postgres:password@inventory-db:5432/inventory_db
    ports:
      - "8001:8001"
    depends_on:
      - inventory-db
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Retail Service (Port 8002) - Fusion de Stores et Sales
  retail-db:
    image: postgres:15
    container_name: retail-db
    environment:
      POSTGRES_DB: retail_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - retail_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  retail-api:
    build: ./retail-api
    container_name: retail-api
    environment:
      DATABASE_URL: postgresql://postgres:password@retail-db:5432/retail_db
    ports:
      - "8002:8002"
    depends_on:
      - retail-db
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped



  # Reporting Service (Port 8005) - MODIFIÉ POUR ANALYTICS SEULEMENT
  reporting-db:
    image: postgres:15
    container_name: reporting-db
    environment:
      POSTGRES_DB: reporting_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - reporting_db_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  reporting-api:
    build: ./reporting-api
    container_name: reporting-api
    environment:
      REPORTING_DATABASE_URL: postgresql://postgres:password@reporting-db:5432/reporting_db
      INVENTORY_API_URL: http://inventory-api:8001/api/v1
      RETAIL_API_URL: http://retail-api:8002/api/v1
      ECOMMERCE_API_URL: http://ecommerce-api:8000/api/v1
    ports:
      - "8005:8005"
    depends_on:
      - reporting-db
      - inventory-api
      - retail-api
      - ecommerce-api
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8005/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ============================================================================
  # SERVICE E-COMMERCE UNIFIÉ
  # ============================================================================

  # Service Ecommerce API (Port 8000) - Fusion de Customers, Cart et Orders
  ecommerce-db:
    image: postgres:15-alpine
    container_name: ecommerce-db
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5450:5432"
    volumes:
      - ecommerce_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  ecommerce-api:
    build: ./ecommerce-api
    container_name: ecommerce-api
    environment:
      DATABASE_URL: postgresql://postgres:password@ecommerce-db:5432/ecommerce_db
      SECRET_KEY: your-super-secret-key-change-in-production
      INVENTORY_API_URL: http://inventory-api:8001
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      - ecommerce-db
      - redis
      - inventory-api
    volumes:
      - ../logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  inventory_db_data:
  retail_db_data:
  reporting_db_data:
  ecommerce_db_data:
  redis_data:

networks:
  default:
    name: microservices-network 