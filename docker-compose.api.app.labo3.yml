version: '3.8'

services:
  # API FastAPI
  api:
    build:
      context: .
      dockerfile: dockerfile.api
      target: production
    container_name: log430-api
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://user:password@10.194.32.219:5432/store_db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_TOKEN=${API_TOKEN:-9645524dac794691257cb44d61ebc8c3d5876363031ec6f66fbd31e4bf85cd84}
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src:ro  # Read-only pour la sécurité
    ports:
      - "${API_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Application Flask (Interface Web)
  web:
    build:
      context: .
      dockerfile: dockerfile.flask
      target: production
    container_name: log430-web
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://user:password@10.194.32.219:5432/store_db
      - API_BASE_URL=http://api:8000
      - API_TOKEN=${API_TOKEN:-your-secret-api-token}
      - FLASK_ENV=production
      - POOL_SIZE=5
      - MAX_OVERFLOW=10
    volumes:
      - ./src:/app/src:ro  # Read-only pour la sécurité
    ports:
      - "${WEB_PORT:-8080}:8080"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

# Réseau isolé pour l'application
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 