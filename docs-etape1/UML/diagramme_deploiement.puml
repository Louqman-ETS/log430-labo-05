@startuml Vue Déploiement

' Définir les styles
skinparam node {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    FontColor Black
}

skinparam database {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontColor Black
}

skinparam artifact {
    BackgroundColor Ivory
    BorderColor Gray
    FontColor Black
}

' Définir les nœuds - Architecture 3-tiers

' Tier 1 - Présentation
node "Navigateur Web" as Browser {
    artifact "Interface Utilisateur" as UI
}

' Tier 2 - Logique Métier
node "Gestion de magasin" as MagasinContainer {
    artifact "App Flask Multi-Magasins" as AppFlask
}

' Tier 3 - Données
node "Database Container" as DBContainer {
    database "PostgreSQL" as PostgreSQL {
        artifact "store_db" as StoreDB
    }
}

' Volume persistant
database "Docker Volume" as DockerVolume {
    artifact "postgres_data" as PostgresData
}

' Connexions entre les tiers
Browser -- MagasinContainer : "HTTP :8081\n(Tier 1 → Tier 2)"
MagasinContainer -- DBContainer : "PostgreSQL Protocol\nvia SQLAlchemy\n(Tier 2 → Tier 3)"
DBContainer -- DockerVolume : "Persistent Storage"

' Notes explicatives

note top of Browser
  Tier 1 - Présentation
  Interface utilisateur web
  Port: 8081
end note

note left of MagasinContainer
  Tier 2 - Logique Métier
  Application Flask Web
  Gestion de 5 magasins
  Règles métier
end note

note bottom of PostgreSQL
  Tier 3 - Données
  Base PostgreSQL
  Multi-magasins avec stocks
  Port: 5432
end note

note right of DockerVolume
  Volume Docker pour
  persistance des données
end note

' Titre et légende
title Architecture de déploiement - Système Multi-Magasins (3-tier)

legend right
  <b>Architecture 3-Tiers</b>
  
  <b>Tier 1 - Présentation:</b>
  Interface web responsive
  
  <b>Tier 2 - Logique Métier:</b>
  Flask + SQLAlchemy
  Gestion 5 magasins, 15 caisses
  
  <b>Tier 3 - Données:</b>
  PostgreSQL + Docker Volume
  Stocks par magasin
  
  <b>Déploiement:</b>
  Docker containerisé
  Port 8081
endlegend

@enduml 