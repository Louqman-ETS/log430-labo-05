version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: log430-nginx
    restart: "no"
    ports:
      - "${API_PORT:-8000}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - api-1
      - api-2
      - api-3
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: log430-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # API FastAPI - Instance 1
  api-1:
    build:
      context: .
      dockerfile: dockerfile.api
      target: production
    container_name: log430-api-1
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://user:password@10.194.32.219:5432/store_db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_TOKEN=${API_TOKEN:-9645524dac794691257cb44d61ebc8c3d5876363031ec6f66fbd31e4bf85cd84}
      - ENVIRONMENT=production
      - INSTANCE_ID=api-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src:ro
      - ./requirements.txt:/app/requirements.txt
    expose:
      - "8000"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # API FastAPI - Instance 2
  api-2:
    build:
      context: .
      dockerfile: dockerfile.api
      target: production
    container_name: log430-api-2
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://user:password@10.194.32.219:5432/store_db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_TOKEN=${API_TOKEN:-9645524dac794691257cb44d61ebc8c3d5876363031ec6f66fbd31e4bf85cd84}
      - ENVIRONMENT=production
      - INSTANCE_ID=api-2
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src:ro
      - ./requirements.txt:/app/requirements.txt
    expose:
      - "8000"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # API FastAPI - Instance 3
  api-3:
    build:
      context: .
      dockerfile: dockerfile.api
      target: production
    container_name: log430-api-3
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://user:password@10.194.32.219:5432/store_db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_TOKEN=${API_TOKEN:-9645524dac794691257cb44d61ebc8c3d5876363031ec6f66fbd31e4bf85cd84}
      - ENVIRONMENT=production
      - INSTANCE_ID=api-3
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src:ro
      - ./requirements.txt:/app/requirements.txt
    expose:
      - "8000"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Application Flask (Interface Web)
  web:
    build:
      context: .
      dockerfile: dockerfile.flask
      target: production
    container_name: log430-web
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://user:password@10.194.32.219:5432/store_db
      - API_BASE_URL=http://nginx:80
      - API_TOKEN=${API_TOKEN:-your-secret-api-token}
      - FLASK_ENV=production
      - POOL_SIZE=5
      - MAX_OVERFLOW=10
    volumes:
      - ./src:/app/src:ro
    ports:
      - "${WEB_PORT:-8080}:8080"
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

# Volumes pour les logs
volumes:
  nginx-logs:
  redis-data:

# Réseau isolé pour l'application
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 