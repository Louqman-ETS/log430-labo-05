name: CI/CD - Microservices Architecture

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install black
        run: |
          python -m pip install --upgrade pip
          pip install black==24.4.2
      - name: Run black (check-only)
        run: black --check --line-length 88 .

  test-microservices:
    name: Test Microservices
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [inventory-api, ecommerce-api, retail-api, reporting-api]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/${{ matrix.service }}/requirements.txt
      - name: Create logs directory
        run: mkdir -p logs
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres123@localhost:5432/test_db" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
          echo "TESTING=true" >> $GITHUB_ENV
      - name: Wait for services
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Initialize test database
        run: |
          cd services/${{ matrix.service }}
          python src/init_db.py
      - name: Run microservice tests
        run: |
          cd services/${{ matrix.service }}
          python -m pytest tests/ -v --tb=short

  test-flask-app:
    name: Test Flask App
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create logs directory
        run: mkdir -p logs
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres123@localhost:5432/test_db" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Initialize test database
        run: |
          PYTHONPATH=./src python -m src.create_db
      - name: Run Flask application tests
        run: |
          PYTHONPATH=./src pytest tests/test_app.py tests/test_functionality.py tests/test_config.py -v

  test-integration:
    name: Integration Tests with Kong Gateway
    runs-on: ubuntu-latest
    needs: [test-microservices, test-flask-app]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install dependencies for all microservices
          for service in inventory-api ecommerce-api retail-api reporting-api; do
            pip install -r services/$service/requirements.txt
          done
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Start Kong Gateway and Microservices
        run: |
          # Start the load balanced Kong setup
          make -f Makefile.kong.loadbalanced up
          # Wait for services to be ready
          sleep 30
      - name: Wait for Kong Gateway
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:9000/health; do sleep 5; done'
      - name: Run integration tests
        run: |
          # Test Kong Gateway routing
          curl -f http://localhost:9000/api/v1/products -H "X-API-Key: admin-key-12345"
          curl -f http://localhost:9000/api/v1/stores -H "X-API-Key: admin-key-12345"
          curl -f http://localhost:9000/api/v1/customers -H "X-API-Key: admin-key-12345"
          curl -f http://localhost:9000/api/v1/reports/sales -H "X-API-Key: admin-key-12345"
      - name: Stop services
        run: |
          make -f Makefile.kong.loadbalanced down
        if: always()

  performance-tests:
    name: Performance Tests with K6
    runs-on: ubuntu-latest
    needs: test-integration
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          for service in inventory-api ecommerce-api retail-api reporting-api; do
            pip install -r services/$service/requirements.txt
          done
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Start Kong Gateway and Microservices
        run: |
          make -f Makefile.kong.loadbalanced up
          sleep 45
      - name: Wait for Kong Gateway
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:9000/health; do sleep 5; done'
      - name: Run K6 Performance Tests
        run: |
          # Light load test for CI
          k6 run --vus 10 --duration 30s k6-tests/simple-loadbalance-test.js
      - name: Stop services
        run: |
          make -f Makefile.kong.loadbalanced down
        if: always()


  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-integration, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        include:
          - service: flask-app
            dockerfile: ./dockerfile.flask
            image_name: log430-web
          - service: inventory-api
            dockerfile: ./services/inventory-api/Dockerfile
            image_name: log430-inventory-api
          - service: ecommerce-api
            dockerfile: ./services/ecommerce-api/Dockerfile
            image_name: log430-ecommerce-api
          - service: retail-api
            dockerfile: ./services/retail-api/Dockerfile
            image_name: log430-retail-api
          - service: reporting-api
            dockerfile: ./services/reporting-api/Dockerfile
            image_name: log430-reporting-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Here you would add actual deployment commands
          # For example: kubectl apply -f k8s/ or docker-compose up -d
          echo "✅ Deployment completed successfully!"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-integration, performance-tests, build-and-push-images]
    if: always()
    steps:
      - name: Notify success
        if: needs.test-integration.result == 'success' && needs.performance-tests.result == 'success'
        run: |
          echo "🎉 All tests passed! Microservices architecture is healthy."
      - name: Notify failure
        if: needs.test-integration.result == 'failure' || needs.performance-tests.result == 'failure'
        run: |
          echo "❌ Some tests failed. Please check the logs."
          exit 1
