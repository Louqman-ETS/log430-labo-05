version: '3.8'

services:


  # Kong Gateway
  kong:
    image: kong/kong-gateway:3.4.1.1
    container_name: kong-gateway
    user: "kong"
    depends_on:
      - inventory-api
      - retail-api
      - ecommerce-api
      - reporting-api
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_LOG_LEVEL: info
      KONG_PLUGINS: bundled,key-auth,rate-limiting,request-transformer,response-transformer,prometheus
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
    ports:
      - "9000:8000"   # Proxy
      - "9443:8443"   # Proxy SSL
      - "9001:8001"   # Admin API
      - "9444:8444"   # Admin API SSL
      - "9002:8002"   # Manager GUI
      - "9445:8445"   # Manager GUI SSL
    volumes:
      - ./kong/kong-declarative.yml:/kong/declarative/kong.yml:ro
      - kong_prefix_vol:/var/lib/kong
      - kong_tmp_vol:/tmp
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - microservices-network

  # Prometheus pour la collecte de métriques
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus-kong
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-kong-microservices.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    networks:
      - microservices-network
    depends_on:
      - kong
      - inventory-api
      - retail-api
      - ecommerce-api
      - reporting-api
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana pour la visualisation
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana-kong
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - microservices-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory API
  inventory-api:
    build: ./services/inventory-api
    container_name: inventory-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@inventory-db:5432/inventory_db
      - INSTANCE_ID=inventory-api-1
    ports:
      - "8001:8001"
    depends_on:
      inventory-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Retail API
  retail-api:
    build: ./services/retail-api
    container_name: retail-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@retail-db:5432/retail_db
      - INSTANCE_ID=retail-api-1
    ports:
      - "8002:8002"
    depends_on:
      retail-db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ecommerce API
  ecommerce-api:
    build: ./services/ecommerce-api
    container_name: ecommerce-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@ecommerce-db:5432/ecommerce_db
      - SECRET_KEY=your-super-secret-key-change-in-production
      - INVENTORY_API_URL=http://inventory-api:8001
      - REDIS_URL=redis://redis:6379/0
      - INSTANCE_ID=ecommerce-api-1
    ports:
      - "8000:8000"
    depends_on:
      ecommerce-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      inventory-api:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reporting API
  reporting-api:
    build: ./services/reporting-api
    container_name: reporting-api
    environment:
      - REPORTING_DATABASE_URL=postgresql://postgres:password@reporting-db:5432/reporting_db
      - INVENTORY_API_URL=http://inventory-api:8001/api/v1
      - RETAIL_API_URL=http://retail-api:8002/api/v1
      - ECOMMERCE_API_URL=http://ecommerce-api:8000/api/v1
      - INSTANCE_ID=reporting-api-1
    ports:
      - "8005:8005"
    depends_on:
      reporting-db:
        condition: service_healthy
      inventory-api:
        condition: service_healthy
      retail-api:
        condition: service_healthy
      ecommerce-api:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8005/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bases de données
  inventory-db:
    image: postgres:15
    container_name: inventory-db
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  retail-db:
    image: postgres:15
    container_name: retail-db
    environment:
      POSTGRES_DB: retail_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - retail_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  ecommerce-db:
    image: postgres:15-alpine
    container_name: ecommerce-db
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5450:5432"
    volumes:
      - ecommerce_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  reporting-db:
    image: postgres:15
    container_name: reporting-db
    environment:
      POSTGRES_DB: reporting_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - reporting_db_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  kong_prefix_vol:
  kong_tmp_vol:
  prometheus_data:
  grafana_data:
  inventory_db_data:
  retail_db_data:
  ecommerce_db_data:
  reporting_db_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge 